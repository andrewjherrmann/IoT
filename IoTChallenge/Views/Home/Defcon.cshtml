@model IoTChallenge.Models.RoomResponse
@{
    ViewBag.Title = "Defcon";
}
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR ub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var defcon = $.connection.defconHub;
            // Create a function that the hub can call back to display messages.
            defcon.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            defcon.client.publishStatusToPage = function (level, time) {
                $('#statuses').append('<li><strong>' + htmlEncode(level)
                    + '</strong>: ' + htmlEncode(time) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Please enter your name if you would like to be identified in the chat feature:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    defcon.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/app/DefconViewModel.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-2.3.0.js")"></script>
    <script>
        var data = @Html.Raw(Json.Encode(Model));
        var vm = new DefconViewModel(data);

        $(function() {
            ko.applyBindings(vm);
        });
    </script>
}
<div class="container">
    <h2>PH Tech Defcon Alert Levels</h2>
    <hr />
    <!-- ko foreach: items -->
    <h4 style="margin-bottom: 0px; margin-top: 15px;" data-bind="text: name">
    </h4>
    <div class="input-group">
        <span class="input-group-btn" data-bind="click: lower" title="Lower Defcon Level">
            <button type="button" class="btn btn-success btn-number" data-type="minus" data-field="quant[2]">
                <span class="glyphicon glyphicon-minus"></span>
            </button>
        </span>
        <div class="progress" style="border-radius: 0; margin-top: 19px; height: 34px;">
            <div data-bind="css: progress_style" role="progressbar">
                <span style="font-size: 24px" data-bind="text: current_level"></span>
            </div>
        </div>
        <span class="input-group-btn" data-bind="click: raise" title="Raise Defcon Level">
            <button type="button" class="btn btn-danger btn-number" data-type="plus" data-field="quant[2]" style="border-radius: 0">
                <span class="glyphicon glyphicon-plus"></span>
            </button>
        </span>
        <span class="input-group-btn" data-bind="click: instantDeath" title="Instant Death!">
            <button type="button" class="btn btn-warning btn-number" data-type="plus" data-field="quant[2]">
                <span class="glyphicon glyphicon-exclamation-sign"></span>
            </button>
        </span>

    </div>



    @*<a data-bind="click: instantDeath, visible: (current_level() > 1)">Instant Death</a>
    <a data-bind="click: raise, visible: (current_level() > 1)">Raise</a>
    <a data-bind="click: lower, visible: (current_level() < 5)">Lower</a>*@

    <!-- /ko -->
    <hr />
    <h3>Thread</h3>
    <div class="input-group">
        <input type="text" id="message" class="form-control" placeholder="Type your message here">
        <span class="input-group-btn">
            <button id="sendmessage" class="btn btn-default" type="button">Send</button>
        </span>
    </div><!-- /input-group -->
    <input type="hidden" id="displayname" /><br />
    <ul id="discussion"></ul>
</div>


